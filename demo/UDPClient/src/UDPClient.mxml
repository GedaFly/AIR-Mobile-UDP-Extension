<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" applicationDPI="160"
			   applicationComplete="applicationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import be.aboutme.nativeExtensions.udp.UDPSocket;
			
			import mx.events.FlexEvent;
			
			private var udpSocket:UDPSocket;
			
			[Bindable]
			public var defaultTextMessage:String = "Hello World!";
			
			/**
			 * We create an instance of the UDPSocket class (native extension),
			 * to send and receive data over UDP.
			 * 
			 * On desktop there is the DatagramSocket class, which is not available
			 * on mobile devices.
			 */ 
			protected function applicationCompleteHandler(event:FlexEvent):void
			{
				udpSocket = new UDPSocket();
				udpSocket.addEventListener(DatagramSocketDataEvent.DATA, udpDataHandler);
				udpSocket.bind(1235);
				udpSocket.receive();
			}
			
			/**
			 * Demonstration of sending text over the udp socket
			 */ 
			protected function sendClickHandler(event:MouseEvent):void
			{
				var bytes:ByteArray = new ByteArray();
				bytes.writeUTFBytes(messageInput.text + "\n");
				messageInput.text = defaultTextMessage;
				udpSocket.send(bytes, ipInput.text, int(portInput.text));
			}
			
			/**
			 * Demonstration of writing objects over the udp socket
			 * This will send a native amf object, with a property "command" set
			 * to the value "PLAY"
			 */ 
			protected function triggerSoundClickHandler(event:MouseEvent):void
			{
				var bytes:ByteArray = new ByteArray();
				bytes.writeObject({command:"PLAY"});
				udpSocket.send(bytes, ipInput.text, int(portInput.text));
			}
			
			/**
			 * This event gets triggered whenever we receive UDP traffic
			 * The traffic can be a amf objects, or plain utf text
			 * We handle this by containing the read functions in a
			 * try catch block.
			 */ 
			protected function udpDataHandler(event:DatagramSocketDataEvent):void
			{
				try
				{
					var o:Object = event.data.readObject();
					switch(o.command)
					{
						default:
							messagesArea.appendText("unknown command: " + o.command + "\n");
							break;
					}
				}
				catch(e:Error)
				{
					event.data.position = 0;
					messagesArea.appendText(event.data.readUTFBytes(event.data.bytesAvailable));
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:layout>		
		<s:VerticalLayout paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" />
	</s:layout>
	
	<s:Scroller width="100%" height="100%">
		<s:VGroup width="100%">
			<s:Label text="Received Messages:" />
			<s:TextArea id="messagesArea" width="100%" height="100%" editable="false"/>
			
			<s:Label text="Send Message:" />
			<s:TextInput width="100%" id="messageInput" text="{defaultTextMessage}" skinClass="spark.skins.mobile.TextInputSkin" />
			<s:Label text="To IP / Port:" />
			<s:HGroup width="100%">
				<s:TextInput width="100%" id="ipInput" text="255.255.255.255" skinClass="spark.skins.mobile.TextInputSkin" />
				<s:TextInput width="100" id="portInput" text="1234" skinClass="spark.skins.mobile.TextInputSkin" />
			</s:HGroup>
			<s:Button label="Send Message" click="sendClickHandler(event)" width="100%" />
			<s:Button label="Trigger Sound" click="triggerSoundClickHandler(event)" width="100%" />
		</s:VGroup>
	</s:Scroller>
</s:Application>
